// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// NextAuth.js Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?         
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?      
  accounts      Account[]       
  sessions      Session[]       
  journals      Journal[]
  categories    Category[]
  preferences   UserPreferences?
  savedSearches SavedSearch[]
  entryDrafts EntryDraft[]
  enrty Entry[]
    timeCapsules TimeCapsule[]
}
model SavedSearch {
  id        String   @id @default(cuid())
  name      String
  query     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreferences {
  id                 String    @id @default(cuid())
  userId             String    @unique
  theme              String    @default("light")
  emailNotifications Boolean   @default(true)
  reminderTime       String?
  defaultJournal     String?   
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journal {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?   
  icon        String?   
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries     Entry[]
   timeCapsules TimeCapsule[]
  entryDrafts EntryDraft[]  
}
model Entry {
  id           String    @id @default(cuid())
  title        String
  content      String    @db.Text
  mood         String?
  isQuickEntry Boolean   @default(false)
  isFavorite   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  journalId    String
  journal      Journal   @relation(fields: [journalId], references: [id], onDelete: Cascade)
  categoryId   String?
  category     Category? @relation(fields: [categoryId], references: [id])
  media        Media[]
  tags         Tag[]
userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isTimeCapsule Boolean @default(false)
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries   Entry[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  entries   Entry[]
}

model Media {
  id            String    @id @default(cuid())
  type          String    
  url           String
  transcription String?   
  createdAt     DateTime  @default(now())
  entries       Entry[]
}
model EntryDraft {
  id        String   @id @default(cuid())
  content   Json     // Stores the draft content as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  journalId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  journal   Journal  @relation(fields: [journalId], references: [id], onDelete: Cascade)

  @@unique([userId, journalId])
}

model TimeCapsule {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  openDate  DateTime
  userId    String
  journalId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  journal   Journal  @relation(fields: [journalId], references: [id], onDelete: Cascade)
}